SELECT USER
FROM DUAL;
--==>> SCOTT

--○ 실습 테이블 생성(지역)
CREATE TABLE REGION
( REGIONID      NUMBER          -- 지역 아이디   -- PK
, REGIONNAME    VARCHAR2(30)    -- 지역 이름
, CONSTRAINT REGION_ID_PK PRIMARY KEY(REGIONID)
);
--==>> Table REGION이(가) 생성되었습니다.

--○ 시퀀스 생성(지역 : REGIONSEQ)
CREATE SEQUENCE REGIONSEQ
NOCACHE;
--==>> Sequence REGIONSEQ이(가) 생성되었습니다.

--○ 데이터 입력 (지역 데이터 입력)

INSERT INTO REGION(REGIONID, REGIONNAME) VALUES(REGIONSEQ.NEXTVAL, '서울');
INSERT INTO REGION(REGIONID, REGIONNAME) VALUES(REGIONSEQ.NEXTVAL, '인천');
INSERT INTO REGION(REGIONID, REGIONNAME) VALUES(REGIONSEQ.NEXTVAL, '대구');
INSERT INTO REGION(REGIONID, REGIONNAME) VALUES(REGIONSEQ.NEXTVAL, '광주');
INSERT INTO REGION(REGIONID, REGIONNAME) VALUES(REGIONSEQ.NEXTVAL, '대전');
INSERT INTO REGION(REGIONID, REGIONNAME) VALUES(REGIONSEQ.NEXTVAL, '부산');
INSERT INTO REGION(REGIONID, REGIONNAME) VALUES(REGIONSEQ.NEXTVAL, '울산');
INSERT INTO REGION(REGIONID, REGIONNAME) VALUES(REGIONSEQ.NEXTVAL, '경기');
INSERT INTO REGION(REGIONID, REGIONNAME) VALUES(REGIONSEQ.NEXTVAL, '강원');
INSERT INTO REGION(REGIONID, REGIONNAME) VALUES(REGIONSEQ.NEXTVAL, '충북');
INSERT INTO REGION(REGIONID, REGIONNAME) VALUES(REGIONSEQ.NEXTVAL, '충남');
INSERT INTO REGION(REGIONID, REGIONNAME) VALUES(REGIONSEQ.NEXTVAL, '전북');
INSERT INTO REGION(REGIONID, REGIONNAME) VALUES(REGIONSEQ.NEXTVAL, '전남');
INSERT INTO REGION(REGIONID, REGIONNAME) VALUES(REGIONSEQ.NEXTVAL, '경북');
INSERT INTO REGION(REGIONID, REGIONNAME) VALUES(REGIONSEQ.NEXTVAL, '경남');
INSERT INTO REGION(REGIONID, REGIONNAME) VALUES(REGIONSEQ.NEXTVAL, '제주');
--==>> 1 행 이(가) 삽입되었습니다. * 16

--○ 확인
SELECT REGIONID, REGIONNAME
FROM REGION;
/*
1	서울
2	인천
3	대구
4	광주
5	대전
6	부산
7	울산
8	경기
9	강원
10	충북
11	충남
12	전북
13	전남
14	경북
15	경남
16	제주
*/

--○ 커밋
COMMIT;
--==>> 커밋 완료.


--○ 실습 테이블 생성 (직위 : POSITION)
CREATE TABLE POSITION
( POSITIONID    NUMBER          -- 직위 아이디       -- PK
, POSITIONNAME  VARCHAR2(30)    -- 직위 이름
, MINBASICPAY   NUMBER          -- 해당 직위의 최소 기본급
, CONSTRAINT POSITION_ID_PK PRIMARY KEY(POSITIONID)
);
--==>> Table POSITION이(가) 생성되었습니다.

--○ 시퀀스 생성 (직위 : POSITIONSEQ)
CREATE SEQUENCE POSITIONSEQ
NOCACHE;
--==>> Sequence POSITIONSEQ이(가) 생성되었습니다.

--○ 데이터 입력 (직위 데이터 입력)
INSERT INTO POSITION(POSITIONID, POSITIONNAME, MINBASICPAY)
VALUES(POSITIONSEQ.NEXTVAL, '사원', 1000000);     -- 백만
INSERT INTO POSITION(POSITIONID, POSITIONNAME, MINBASICPAY)
VALUES(POSITIONSEQ.NEXTVAL, '대리', 2000000);     -- 이백만
INSERT INTO POSITION(POSITIONID, POSITIONNAME, MINBASICPAY)
VALUES(POSITIONSEQ.NEXTVAL, '과장', 3000000);     -- 삼백만
INSERT INTO POSITION(POSITIONID, POSITIONNAME, MINBASICPAY)
VALUES(POSITIONSEQ.NEXTVAL, '부장', 4000000);     -- 사백만
INSERT INTO POSITION(POSITIONID, POSITIONNAME, MINBASICPAY)
VALUES(POSITIONSEQ.NEXTVAL, '상무', 5000000);     -- 오백만
--==>> 1 행 이(가) 삽입되었습니다. * 5


--○ 확인
SELECT POSITIONID, POSITIONNAME, MINBASICPAY
FROM POSITION;
--==>>
/*
1	사원	1000000
2	대리	2000000
3	과장	3000000
4	부장	4000000
5	상무	5000000
*/

--○ 커밋
COMMIT;
--==>> 커밋 완료.


--○ 실습 테이블 생성 (부서 : DEPARTMENT)
CREATE TABLE DEPARTMENT
( DEPARTMENTID      NUMBER
, DEPARTMENTNAME    VARCHAR2(30)
, CONSTRAINT DEPARTMENT_ID_PK PRIMARY KEY(DEPARTMENTID)
);
--==>> Table DEPARTMENT이(가) 생성되었습니다.


--○ 시퀀스 생성 (DEPARTMENTSEQ)
CREATE SEQUENCE DEPARTMENTSEQ
NOCACHE;
--==>> Sequence DEPARTMENTSEQ이(가) 생성되었습니다.


--○ 데이터 입력 (부서 데이터 입력)
INSERT INTO DEPARTMENT(DEPARTMENTID, DEPARTMENTNAME) VALUES(DEPARTMENTSEQ.NEXTVAL, '개발부');
INSERT INTO DEPARTMENT(DEPARTMENTID, DEPARTMENTNAME) VALUES(DEPARTMENTSEQ.NEXTVAL, '기획부');
INSERT INTO DEPARTMENT(DEPARTMENTID, DEPARTMENTNAME) VALUES(DEPARTMENTSEQ.NEXTVAL, '영업부');
INSERT INTO DEPARTMENT(DEPARTMENTID, DEPARTMENTNAME) VALUES(DEPARTMENTSEQ.NEXTVAL, '인사부');
INSERT INTO DEPARTMENT(DEPARTMENTID, DEPARTMENTNAME) VALUES(DEPARTMENTSEQ.NEXTVAL, '사업부');


--○ 확인
SELECT DEPARTMENTID, DEPARTMENTNAME
FROM DEPARTMENT;
--==>>
/*
1	개발부
2	기획부
3	영업부
4	인사부
5	사업부
*/

--○ 커밋
COMMIT;
--==>> 커밋 완료.

--○ 실습 테이블 생성(직원 : EMPLOYEE)
-- 사원번호, 사원명, 주민번호, 생년월일, 양음력, 전화번호, 부서, 직위, 지역, 기본급, 수당
CREATE TABLE EMPLOYEE
( EMPLOYEEID        NUMBER               -- 사원 번호    -- PK
, NAME              VARCHAR2(30)         -- 사원 이름    
, SSN               VARCHAR2(20)         -- 주민 번호    -- 암호화 기능 적용(타입 CHECK~!!!)
, BIRTHDAY          DATE                 -- 생년 월일
, LUNAR             NUMBER(1) DEFAULT 0  -- 양 음력      -- 양력0, 음력1
, TELEPHONE         VARCHAR2(40)         -- 전화번호
, DEPARTMENTID      NUMBER               -- 부서아이디   -- FK
, POSITIONID        NUMBER               -- 직위아이디   -- FK
, REGIONID          NUMBER               -- 지역아이디   -- FK
, BASICPAY          NUMBER               -- 기본급
, EXTRAPAY          NUMBER               -- 수당
, CONSTRAINT EMPLOYEE_ID_PK PRIMARY KEY(EMPLOYEEID)
, CONSTRAINT EMPLOYEE_DEPARTMENTID_FK FOREIGN KEY(DEPARTMENTID)
                    REFERENCES DEPARTMENT(DEPARTMENTID)
, CONSTRAINT EMPLOYEE_POSITIONID_FK FOREIGN KEY(POSITIONID)
                    REFERENCES POSITION(POSITIONID)
, CONSTRAINT EMPLOYEE_REGIONID_FK FOREIGN KEY(REGIONID)
                    REFERENCES REGION(REGIONID)
, CONSTRAINT EMPLOYEE_LUNAR_CK CHECK(LUNAR=0 OR LUNAR=1)                    
);
--==>> Table EMPLOYEE이(가) 생성되었습니다.


--○ 시퀀스 생성 (직원 : EMPLOYEESEQ)
CREATE SEQUENCE EMPLOYEESEQ
NOCACHE;
--==>> Sequence EMPLOYEESEQ이(가) 생성되었습니다.


--○ 데이터 입력 (직원 데이터 입력)
INSERT INTO EMPLOYEE(EMPLOYEEID, NAME, SSN, BIRTHDAY, LUNAR, TELEPHONE
                    , DEPARTMENTID, POSITIONID, REGIONID, BASICPAY, EXTRAPAY)
VALUES (EMPLOYEESEQ.NEXTVAL, '엄소연', CRYPTPACK.ENCRYPT('9411241234567', '9411241234567')
        , TO_DATE('1994-11-24', 'YYYY-MM-DD'), 0, '010-7193-4562', 1, 1, 1, 1500000, 1500000 );
                                                                            -------- --------
                                                                        --  백오십만 백오십만
--==>> 1 행 이(가) 삽입되었습니다.

--○ 확인
SELECT *
FROM EMPLOYEE;
--==>>
/*
EMPLOYEEID NAME         SSN       BIRTHDAY      LUNAR      TELEPHONE         DEPARTMENTID  POSITIONID   REGIONID   BASICPAY   EXTRAPAY
---------- ------------ --------- ------------- ---------- ----------------- ------------- ------------ ---------- ---------- ----------
         1 엄소연       ?`??$?   1994-11-24    0          010-7193-4562                1            1          1     1500000    1500000
*/

--○ 커밋
COMMIT;
--==>> 커밋 완료.


--○ 직원 정보 조회 쿼리문 구성
SELECT E.EMPLOYEEID AS EMPLOYEEID
     , E.NAME AS NAME
     , E.SSN AS SSN
     , TO_CHAR(E.BIRTHDAY, 'YYYY-MM-DD') AS BIRTHDAY
     , E.LUNAR AS LUNAR
     , DECODE(E.LUNAR, 0, '양력', 1, '음력') AS LUNARNAME
     , E.TELEPHONE AS TELEPHONE
     , E.DEPARTMENTID AS DEPARTMENTID
     , (SELECT DEPARTMENTNAME
        FROM DEPARTMENT
        WHERE DEPARTMENTID = E.DEPARTMENTID) AS DEPARTMENTNAME
     , E.POSITIONID AS POSITIONID
     , (SELECT POSITIONNAME
        FROM POSITION
        WHERE POSITIONID = E.POSITIONID) AS POSITIONNAME
     , E.REGIONID AS REGIONID
     , (SELECT REGIONNAME
        FROM REGION
        WHERE REGIONID = E.REGIONID) AS REGIONNAME
     , E.BASICPAY AS BASICPAY
     , E.EXTRAPAY AS EXTRAPAY
     , NVL(E.BASICPAY, 0) + NVL(E.EXTRAPAY, 0) AS PAY
FROM EMPLOYEE E;
--==>> 1	엄소연	?`??$?	1994-11-24	0	양력	010-7193-4562	1	개발부	1	사원	1	서울	1500000	1500000	3000000

--○ 뷰 생성 (EMPLOYEEVIEW)
CREATE OR REPLACE VIEW EMPLOYEEVIEW
AS
SELECT E.EMPLOYEEID AS EMPLOYEEID
     , E.NAME AS NAME
     , E.SSN AS SSN
     , TO_CHAR(E.BIRTHDAY, 'YYYY-MM-DD') AS BIRTHDAY
     , E.LUNAR AS LUNAR
     , DECODE(E.LUNAR, 0, '양력', 1, '음력') AS LUNARNAME
     , E.TELEPHONE AS TELEPHONE
     , E.DEPARTMENTID AS DEPARTMENTID
     , (SELECT DEPARTMENTNAME
        FROM DEPARTMENT
        WHERE DEPARTMENTID = E.DEPARTMENTID) AS DEPARTMENTNAME
     , E.POSITIONID AS POSITIONID
     , (SELECT POSITIONNAME
        FROM POSITION
        WHERE POSITIONID = E.POSITIONID) AS POSITIONNAME
     , E.REGIONID AS REGIONID
     , (SELECT REGIONNAME
        FROM REGION
        WHERE REGIONID = E.REGIONID) AS REGIONNAME
     , E.BASICPAY AS BASICPAY
     , E.EXTRAPAY AS EXTRAPAY
     , NVL(E.BASICPAY, 0) + NVL(E.EXTRAPAY, 0) AS PAY
FROM EMPLOYEE E;
--==>> View EMPLOYEEVIEW이(가) 생성되었습니다.

--○ 확인
SELECT *
FROM EMPLOYEEVIEW;
--==>> 1	엄소연	?`??$?	1994-11-24	0	양력	010-7193-4562	1	개발부	1	사원	1	서울	1500000	1500000	3000000

--○ 지역 정보 조회 쿼리문 구성
--   (특정 지역 데이터 삭제 가능여부 확인)
SELECT R.REGIONID AS REGIONID
     , R.REGIONNAME AS REGIONNAME
     , (SELECT COUNT(*)
        FROM EMPLOYEE
        WHERE REGIONID = R.REGIONID) AS DELCHECK
FROM REGION R;
--==>>
/*
1	서울	1
2	인천	0
     :
14	경북	0
15	경남	0
16	제주	0
*/
--> 『서울』의 지역 정보는 삭제가 불가능한 데이터이며,
--   그 외 나머지 지역 정보는 삭제가 가능한 데이터임을 판별할 수 있도록 구성한 쿼리문.

--※ 뷰 생성 (지역 정보 : REGIONVIEW)
CREATE OR REPLACE VIEW REGIONVIEW
AS
SELECT R.REGIONID AS REGIONID
     , R.REGIONNAME AS REGIONNAME
     , (SELECT COUNT(*)
        FROM EMPLOYEE
        WHERE REGIONID = R.REGIONID) AS DELCHECK
FROM REGION R;
--==>> View REGIONVIEW이(가) 생성되었습니다.

--○ 확인
SELECT *
FROM REGIONVIEW;
--==>>
/*
1	서울	1
2	인천	0
     :
14	경북	0
15	경남	0
16	제주	0
*/


--○ 직위 정보 조회 쿼리문 구성
--   (특정 직위 데이터 삭제 가능여부 확인)
SELECT P.POSITIONID AS POSITIONID
     , P.POSITIONNAME AS POSITIONNAME
     , P.MINBASICPAY AS MINBASICPAY
     , (SELECT COUNT(*)
        FROM EMPLOYEE
        WHERE POSITIONID = P.POSITIONID) AS DELCHECK
FROM POSITION P;
--==>>
/*
1	사원	1000000	1
2	대리	2000000	0
3	과장	3000000	0
4	부장	4000000	0
5	상무	5000000	0
*/

--※ 뷰 생성 (직위 정보 : POSITIONVIEW)
CREATE OR REPLACE VIEW POSITIONVIEW
AS
SELECT P.POSITIONID AS POSITIONID
     , P.POSITIONNAME AS POSITIONNAME
     , P.MINBASICPAY AS MINBASICPAY
     , (SELECT COUNT(*)
        FROM EMPLOYEE
        WHERE POSITIONID = P.POSITIONID) AS DELCHECK
FROM POSITION P;
--==>> View POSITIONVIEW이(가) 생성되었습니다.


--○ 확인
SELECT *
FROM POSITIONVIEW
ORDER BY POSITIONID;
--==>> 
/*
1	사원	1000000	1
2	대리	2000000	0
3	과장	3000000	0
4	부장	4000000	0
5	상무	5000000	0
*/


--○ 부서 정보 조회 쿼리문 구성
--   (특정 부서 데이터 삭제 가능여부 확인)
SELECT D.DEPARTMENTID AS DEPARTMENTID
     , D.DEPARTMENTNAME AS DEPARTMENTNAME
     , (SELECT COUNT(*)
        FROM EMPLOYEE
        WHERE DEPARTMENTID = D.DEPARTMENTID) AS DELCHECK
FROM DEPARTMENT D;
--==>>
/*
1	개발부	1
2	기획부	0
3	영업부	0
4	인사부	0
5	사업부	0
*/


--※ 뷰 생성 (직위 정보 : DEPARTMENTVIEW)
CREATE OR REPLACE VIEW DEPARTMENTVIEW
AS
SELECT D.DEPARTMENTID AS DEPARTMENTID
     , D.DEPARTMENTNAME AS DEPARTMENTNAME
     , (SELECT COUNT(*)
        FROM EMPLOYEE
        WHERE DEPARTMENTID = D.DEPARTMENTID) AS DELCHECK
FROM DEPARTMENT D;
--==>> View DEPARTMENTVIEW이(가) 생성되었습니다.

--○ 확인
SELECT *
FROM DEPARTMENTVIEW;
--==>> 
/*
1	개발부	1
2	기획부	0
3	영업부	0
4	인사부	0
5	사업부	0
*/


-- 부서 전체 데이터 조회 쿼리문 구성
SELECT DEPARTMENTID, DEPARTMENTNAME, DELCHECK
FROM DEPARTMENTVIEW
ORDER BY DEPARTMENTID;
--> 한 줄 구성
SELECT DEPARTMENTID, DEPARTMENTNAME, DELCHECK FROM DEPARTMENTVIEW ORDER BY DEPARTMENTID
;
--==>>
/*
1	개발부	1
2	기획부	0
3	영업부	0
4	인사부	0
5	사업부	0
*/


-- 부서 데이터 삭제 쿼리문 구성 (부서번호로 부서 데이터 삭제)
SELECT *
FROM DEPARTMENT
WHERE DEPARTMENTID = 1;
--==>> 1	개발부
DELETE
FROM DEPARTMENT
WHERE DEPARTMENTID = 1;
--> 한 줄 구성
DELETE FROM DEPARTMENT WHERE DEPARTMENTID = 1
;
--==>> ORA-02292: integrity constraint (SCOTT.EMPLOYEE_DEPARTMENTID_FK) violated - child record found

-- 부서 데이터 수정 쿼리문 구성 (부서번호로 부서 이름 변경)
UPDATE DEPARTMENT
SET DEPARTMENTNAME = '총무부'
WHERE DEPARTMENTID = 1;
--> 한 줄 구성
UPDATE DEPARTMENT SET DEPARTMENTNAME = '총무부' WHERE DEPARTMENTID = 1
;
--==>> 1 행 이(가) 업데이트되었습니다.

ROLLBACK;
--==>> 롤백 완료.


-- 지역 전체 데이터 조회 쿼리문 구성
SELECT REGIONID, REGIONNAME, DELCHECK
FROM REGIONVIEW
ORDER BY REGIONID;
--> 한 줄 구성
SELECT REGIONID, REGIONNAME, DELCHECK FROM REGIONVIEW ORDER BY REGIONID
;
--==>> 
/*
1	서울	1
2	인천	0
3	대구	0
4	광주	0
5	대전	0
6	부산	0
7	울산	0
8	경기	0
9	강원	0
10	충북	0
11	충남	0
12	전북	0
13	전남	0
14	경북	0
15	경남	0
16	제주	0
*/

-- 지역 데이터 삭제 쿼리문 구성 (지역번호로 지역 데이터 삭제)
SELECT *
FROM REGION
WHERE REGIONID = 1;
--==>> 1	서울
DELETE
FROM REGION
WHERE REGIONID = 1;
--> 한 줄 구성
DELETE FROM REGION WHERE REGIONID = 1
;
--==>> ORA-02292: integrity constraint (SCOTT.EMPLOYEE_REGIONID_FK) violated - child record found4


-- 지역 데이터 수정 쿼리문 구성 (지역번호로 지역 이름 변경)
UPDATE REGION
SET REGIONNAME = '지역명'
WHERE REGIONID = 1;
--> 한 줄 구성
UPDATE REGION SET REGIONNAME = '지역명' WHERE REGIONID = 1
;
--==>> 1 행 이(가) 업데이트되었습니다.

ROLLBACK;
--==>> 롤백 완료.


-- 직위 전체 데이터 조회 쿼리문 구성
SELECT POSITIONID, POSITIONNAME, MINBASICPAY, DELCHECK
FROM POSITIONVIEW
ORDER BY POSITIONID;
--> 한 줄 구성
SELECT POSITIONID, POSITIONNAME, MINBASICPAY, DELCHECK FROM POSITIONVIEW ORDER BY POSITIONID
;
--==>>
/*
1	사원	1000000	1
2	대리	2000000	0
3	과장	3000000	0
4	부장	4000000	0
5	상무	5000000	0
*/

-- 직위 데이터 삭제 쿼리문 구성 (직위번호로 지역 데이터 삭제)
SELECT *
FROM POSITION
WHERE POSITIONID = 1;
--==>> 1	사원	1000000
DELETE
FROM POSITION
WHERE POSITIONID = 1;
--> 한 줄 구성
DELETE FROM POSITION WHERE POSITIONID = 1
;
--==>> ORA-02292: integrity constraint (SCOTT.EMPLOYEE_POSITIONID_FK) violated - child record found


-- 지역 데이터 수정 쿼리문 구성 (지역번호로 지역 이름 변경)
UPDATE POSITION
SET POSITIONNAME = '직위명'
  , MINBASICPAY = 3000000
WHERE POSITIONID = 1;
--> 한 줄 구성
UPDATE POSITION SET POSITIONNAME = '직위명', MINBASICPAY = 3000000 WHERE POSITIONID = 1
;
--==>> 1 행 이(가) 업데이트되었습니다.

ROLLBACK
--==>> 롤백 완료.

--------------------------------------------------------------------------------
--■■■ 로그인 / 로그아웃 기능 적용 과정 추가 ■■■--
-- 현재 우리가 구성한 테이블 구조는 ID 와 PW 컬럼 정보를 담고있는 테이블이
-- 별도로 존재하지 않는 상황이다
-- 이와 관련하여 EMPLOYEEID(사원아이디) 와 SSN(주민번호) 뒷자리 7자리의 숫자를
-- 활용하여 기능을 구현할 수 있도록 처리한다

--※ 기존 테이블 구조 변경 계획
--①
-- EMPLOYEE (직원 데이터 테이블)의 SSN(주민번호) 컬럼을 분리한다
-- SSN   -----------> SSN1, SSN2
-- SSN1  -----------> 주민번호 앞 6자리
-- SSN2  -----------> 주민번호 뒷 7자리 → 암호화 적용

--②
-- EMPLOYEE (직원 데이터 테이블)의 GRADE(등급) 컬럼을 추가한다
-- GRADE -----------> 관리자0, 일반사원1


--※ 기존 테이블 구조 변경 수행
--①-1. 컬럼 추가
ALTER TABLE EMPLOYEE
ADD(SSN1 CHAR(6), SSN2 VARCHAR2(50));
--==>> Table EMPLOYEE이(가) 변경되었습니다.

SELECT *
FROM EMPLOYEE;

--①-2. 기존 데이터에 대해 컬럼의 내용 수정
-- '9411241234567'
SELECT CRYPTPACK.DECRYPT(SSN, '9411241234567')
FROM EMPLOYEE;
--==>> 9411241234567

UPDATE EMPLOYEE
SET SSN1 = SUBSTR(입력내용, 1, 6)
  , SSN2 = CRYPTPACK.ENCRYPT(SUBSTR(입력내용, 7, 7), SUBSTR(입력내용, 7, 7));
--> 입력내용에 CRYPTPACK.DECRYPT(SSN, '9411242234567') 삽입

UPDATE EMPLOYEE
SET SSN1 = SUBSTR(CRYPTPACK.DECRYPT(SSN, '9411241234567'), 1, 6)
  , SSN2 = CRYPTPACK.ENCRYPT(SUBSTR(CRYPTPACK.DECRYPT(SSN, '9411241234567'), 7, 7), SUBSTR(CRYPTPACK.DECRYPT(SSN, '9411241234567'), 7, 7));
--==>> 1 행 이(가) 업데이트되었습니다.

SELECT *
FROM EMPLOYEE;
--==>> 1	엄소연	?`??$?	1994-11-24	0	010-7193-4562	1	1	1	1500000	1500000	941124	Y{?7?


--①-3. 기존 SSN(주민번호) 컬럼 제거
ALTER TABLE EMPLOYEE
DROP COLUMN SSN;
--==>> Table EMPLOYEE이(가) 변경되었습니다.


--②-1. GRADE 컬럼 추가 → 기본값을 1(일반사원)로 구성
ALTER TABLE EMPLOYEE
ADD GRADE NUMBER(1) DEFAULT 1;
--==>> Table EMPLOYEE이(가) 변경되었습니다.

SELECT * 
FROM EMPLOYEE;
--==>> 1	엄소연	1994-11-24	0	010-7193-4562	1	1	1	1500000	1500000	941124	Y{?7?	1

--②-2. 엄소연 사원을 관리자로 임명(설정)
UPDATE EMPLOYEE
SET GRADE = 0
WHERE EMPLOYEEID = 1;
--==>> 1 행 이(가) 업데이트되었습니다.

SELECT * 
FROM EMPLOYEE;
--==>> 1	엄소연	1994-11-24	0	010-7193-4562	1	1	1	1500000	1500000	941124	Y{?7?	0

--○ 커밋
COMMIT;
--==>> 커밋 완료.

--※ 테이블의 구조를 변경했기 때문에
--   이 테이블(EMPLOYEE)을 기반으로 생성한 뷰의 내용을 수정
CREATE OR REPLACE VIEW EMPLOYEEVIEW
AS
SELECT E.EMPLOYEEID AS EMPLOYEEID
     , E.NAME AS NAME
     , E.SSN1 AS SSN
     , TO_CHAR(E.BIRTHDAY, 'YYYY-MM-DD') AS BIRTHDAY
     , E.LUNAR AS LUNAR
     , DECODE(E.LUNAR, 0, '양력', 1, '음력') AS LUNARNAME
     , E.TELEPHONE AS TELEPHONE
     , E.DEPARTMENTID AS DEPARTMENTID
     , (SELECT DEPARTMENTNAME
        FROM DEPARTMENT
        WHERE DEPARTMENTID = E.DEPARTMENTID) AS DEPARTMENTNAME
     , E.POSITIONID AS POSITIONID
     , (SELECT POSITIONNAME
        FROM POSITION
        WHERE POSITIONID = E.POSITIONID) AS POSITIONNAME
     , E.REGIONID AS REGIONID
     , (SELECT REGIONNAME
        FROM REGION
        WHERE REGIONID = E.REGIONID) AS REGIONNAME
     , E.BASICPAY AS BASICPAY
     , E.EXTRAPAY AS EXTRAPAY
     , NVL(E.BASICPAY, 0) + NVL(E.EXTRAPAY, 0) AS PAY
     , E.GRADE AS GRADE
FROM EMPLOYEE E;
--==>> View EMPLOYEEVIEW이(가) 생성되었습니다.


SELECT * 
FROM EMPLOYEEVIEW;
--==>> 1	엄소연	941124	1994-11-24	0	양력	010-7193-4562	1	개발부	1	사원	1	서울	1500000	1500000	3000000	0

--○ 데이터 입력 (직원 데이터 입력) - 컬럼의 구조가 변경된 사항을 기반으로 다시 구성
INSERT INTO EMPLOYEE(EMPLOYEEID, NAME, SSN1, SSN2, BIRTHDAY, LUNAR, TELEPHONE
                    , DEPARTMENTID, POSITIONID, REGIONID, BASICPAY, EXTRAPAY)
VALUES (EMPLOYEESEQ.NEXTVAL, '정미경', '981009', CRYPTPACK.ENCRYPT('2345678', '2345678')
        , TO_DATE('1998-10-08', 'YYYY-MM-DD'), 0, '010-3098-3091', 1, 1, 8, 1500000, 1500000 );
--> 한 줄 구성
INSERT INTO EMPLOYEE(EMPLOYEEID, NAME, SSN1, SSN2, BIRTHDAY, LUNAR, TELEPHONE, DEPARTMENTID, POSITIONID, REGIONID, BASICPAY, EXTRAPAY) VALUES (EMPLOYEESEQ.NEXTVAL, '정미경', '981009', CRYPTPACK.ENCRYPT('2345678', '2345678'), TO_DATE('1998-10-08', 'YYYY-MM-DD'), 0, '010-3098-3091', 1, 1, 8, 1500000, 1500000)
;
--==>> 1 행 이(가) 삽입되었습니다.

--○ 확인
SELECT *
FROM EMPLOYEE
ORDER BY EMPLOYEEID;
--==>>
/*
1	엄소연	941124	1994-11-24	0	양력	010-7193-4562	1	개발부	1	사원	1	서울	1500000	1500000	3000000	0
2	정미경	981009	1998-10-08	0	양력	010-3098-3091	1	개발부	1	사원	8	경기	1500000	1500000	3000000	1
*/

SELECT *
FROM EMPLOYEEVIEW
ORDER BY EMPLOYEEID;
--==>>
/*
1	엄소연	941124	1994-11-24	0	양력	010-7193-4562	1	개발부	1	사원	1	서울	1500000	1500000	3000000	0
2	정미경	981009	1998-10-08	0	양력	010-3098-3091	1	개발부	1	사원	8	경기	1500000	1500000	3000000	1
*/

--○ 커밋
COMMIT;
--==>> 커밋 완료.

-- 주민등록번호 뒷자리(비밀번호) 일치 쿼리문 구성
SELECT name, CRYPTPACK.DECRYPT(SSN2, '2345678') AS SSN2
FROM EMPLOYEE
WHERE EMPLOYEEID = 2
order by employeeid;
--> 한 줄 구성
SELECT CRYPTPACK.DECRYPT(SSN2, '2345678') AS SSN2 FROM EMPLOYEE WHERE EMPLOYEEID = 2
;

-- 주번뒷자리 변경 쿼리문
-- 먼저 ssn2의 값을 변경하고, 암호화를 한다
--update employee
--set ssn2 = 2345678
--where employeeid = 2;

--UPDATE EMPLOYEE
--SET SSN2 = CRYPTPACK.ENCRYPT(CRYPTPACK.DECRYPT(SSN2, '2345678'), CRYPTPACK.DECRYPT(SSN2, '2345678'))
--where employeeid = 2;
--------------------------------------------------------------------------------

-- 일반사원 로그인 쿼리문 구성(아이디, 패스워드)
-- 사원번호, 주민번호뒷자리
SELECT NAME
FROM EMPLOYEE
WHERE EMPLOYEEID = 아이디
  AND SSN2 = 패스워드;

SELECT NAME
FROM EMPLOYEE
WHERE EMPLOYEEID = 2
  AND SSN2 = CRYPTPACK.ENCRYPT('2345678', '2345678');
--==>> 정미경
--> 일반사원으로 로그인 성공

SELECT NAME
FROM EMPLOYEE
WHERE EMPLOYEEID = 2
  AND SSN2 = CRYPTPACK.ENCRYPT('1234567', '1234567');
--==>> 조회 결과 없음
--> 일반사원으로 로그인 실패

SELECT NAME
FROM EMPLOYEE
WHERE EMPLOYEEID = 1
  AND SSN2 = CRYPTPACK.ENCRYPT('1234567', '1234567');
--==>> 엄소연
--> 관리자 이지만, 일반사원으로도 로그인 성공

-- 일반사원 로그인 쿼리문 한 줄 구성
SELECT NAME FROM EMPLOYEE WHERE EMPLOYEEID = 'ID문자열' AND SSN2 = CRYPTPACK.ENCRYPT('PW문자열', 'PW문자열')
;


-- 관리자 로그인 쿼리문 구성(아이디, 패스워드, 등급)
-- 사원번호, 주민번호뒷자리, 등급
SELECT NAME
FROM EMPLOYEE
WHERE EMPLOYEEID = 아이디
  AND SSN2 = 패스워드
  AND GRADE = 0;

SELECT NAME
FROM EMPLOYEE
WHERE EMPLOYEEID = 2
  AND SSN2 = CRYPTPACK.ENCRYPT('2345678', '2345678')
  AND GRADE = 0;
--==>> 조회 결과 없음
--> 관리자로 로그인 실패

SELECT NAME
FROM EMPLOYEE
WHERE EMPLOYEEID = 1
  AND SSN2 = CRYPTPACK.ENCRYPT('1234567', '1234567')
  AND GRADE = 0;
--==>> 엄소연
--> 관리자 로그인 성공

-- 관리자 로그인 쿼리문 한 줄 구성
SELECT NAME FROM EMPLOYEE WHERE EMPLOYEEID = 'ID문자열' AND SSN2 = CRYPTPACK.ENCRYPT('PW문자열', 'PW문자열') AND GRADE = 0
;

-- 일반 직원의 리스트 조회 쿼리문 구성
SELECT EMPLOYEEID, NAME, SSN, BIRTHDAY, LUNARNAME, TELEPHONE
     , DEPARTMENTNAME, POSITIONNAME, REGIONNAME
FROM EMPLOYEEVIEW
ORDER BY EMPLOYEEID;
--> 한 줄 구성
SELECT EMPLOYEEID, NAME, SSN, BIRTHDAY, LUNARNAME, TELEPHONE, DEPARTMENTNAME, POSITIONNAME, REGIONNAME FROM EMPLOYEEVIEW  ORDER BY EMPLOYEEID
;
--==>>
/*
1	엄소연	941124	1994-11-24	양력	010-7193-4562	개발부	대리	인천
2	정미경	981009	1998-10-08	양력	010-3098-3091	개발부	사원	경기
4	김태민	941111	1994-11-11	양력	010-1234-1234	기획부	과장	대구
*/




--------------------------------------------------------------------------------

DESC EMPLOYEEVIEW;

DESC EMPLOYEE;

DESC REGIONVIEW;


-- 테이블 및 시퀀스 삭제 시 사용
--drop table EMPLOYEE;
--drop SEQUENCE EMPLOYEESEQ;
--
--drop table region;
--drop SEQUENCE REGIONSEQ;
--
--drop table POSITION;
--drop SEQUENCE POSITIONSEQ;
--
--drop table DEPARTMENT;
--drop SEQUENCE DEPARTMENTSEQ;

--PURGE RECYCLEBIN;