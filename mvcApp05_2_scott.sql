SELECT USER
FROM DUAL;
-- SCOTT


-- ▽ MEMBERLIST 테이블 작성
CREATE TABLE MEMBERLIST
( ID    VARCHAR2(20)
, PW    VARCHAR2(20)
, NAME  VARCHAR2(50)
, TEL   VARCHAR2(50)
, EMAIL VARCHAR2(100)
, CONSTRAINT MEMBERLIST_ID_PK PRIMARY KEY(ID)
);
-- Table MEMBERLIST이(가) 생성되었습니다.

-- MEMBERLIST 데이터 입력
INSERT INTO MEMBERLIST(ID, PW, NAME, TEL, EMAIL)
VALUES('superman', CRYPTPACK.ENCRYPT('1234567', '1234567'), '김태민', '010-1111-1111', 'ktm@test.com');
-- 1 행 이(가) 삽입되었습니다.

INSERT INTO MEMBERLIST(ID, PW, NAME, TEL, EMAIL)
VALUES('superwoman', CRYPTPACK.ENCRYPT('java002$', 'java002$'), '정미경', '010-2222-2222', 'jmk@test.com');
-- 1 행 이(가) 삽입되었습니다.
DESC MEMBERLIST;


-- ▽ MEMBERRECORD 테이블 생성 -------------------------------------------------
CREATE TABLE MEMBERRECORD
( SCOREID   NUMBER
, KOR       NUMBER(3)
, ENG       NUMBER(3)
, MAT       NUMBER(3)
, ID        VARCHAR2(20)
, CONSTRAINT MEMBERRECORD_SCOREID_PK PRIMARY KEY(ID)
, CONSTRAINT MEMBERRECORD_KOR_CK CHECK(KOR>=0 AND KOR<=100)
, CONSTRAINT MEMBERRECORD_ENG_CK CHECK(ENG>=0 AND ENG<=100)
, CONSTRAINT MEMBERRECORD_MAT_CK CHECK(MAT>=0 AND MAT<=100)
, CONSTRAINT MEMBERRECORD_ID_FK FOREIGN KEY(ID)
             REFERENCES MEMBERLIST(ID)
);
-- Table MEMBERRECORD이(가) 생성되었습니다.

-- ▽ MEMBERRECORDSEQ 시퀀스 생성
CREATE SEQUENCE MEMBERRECORDSEQ
start with 2
NOCACHE;
-- Sequence MEMBERRECORDSEQ이(가) 생성되었습니다.

-- MEMBERRECORD 데이터 입력
INSERT INTO MEMBERRECORD(SCOREID, KOR, ENG, MAT, ID)
VALUES(MEMBERRECORDSEQ.NEXTVAL, 90, 80, 70, 'superman');
-- 1 행 이(가) 삽입되었습니다.

--------------------------------------------------------------------------------

SELECT *
FROM MEMBERLIST;
/*
superman	=o???	김태민	010-1111-1111	ktm@test.com
superwoman	??{	정미경	010-2222-2222	jmk@test.com
*/

SELECT *
FROM MEMBERRECORD;
-- 1	90	80	70	superman

-- 커밋
COMMIT;
-- 커밋 완료.

--------------------------------------------------------------------------------

-- ▽ MEMBERLIST 조회 쿼리문 구성
SELECT L.ID AS ID
     , L.NAME AS NAME
     , L.TEL AS TEL
     , L.EMAIL AS EMAIL
     , (SELECT COUNT(*)
        FROM MEMBERRECORD
        WHERE ID = L.ID) AS DELCHECK
FROM MEMBERLIST L
ORDER BY ID;

-- ▽ MEMBERLIST_VIEW 작성
CREATE OR REPLACE VIEW MEMBERLIST_VIEW
AS
SELECT L.ID AS ID
     , L.NAME AS NAME
     , L.TEL AS TEL
     , L.EMAIL AS EMAIL
     , (SELECT COUNT(*)
        FROM MEMBERRECORD
        WHERE ID = L.ID) AS DELCHECK
FROM MEMBERLIST L
ORDER BY L.ID;
-- View MEMBERLIST_VIEW이(가) 생성되었습니다.

-- ▼ MEMBERLIST_VIEW 조회 쿼리문 구성
SELECT ID, NAME, TEL, EMAIL, DELCHECK
FROM MEMBERLIST_VIEW
ORDER BY ID;
-- 한 줄 구성
SELECT ID, NAME, TEL, EMAIL, DELCHECK FROM MEMBERLIST_VIEW ORDER BY ID
;


-- ▼ MEMBERLIST 수정 쿼리문 구성
UPDATE MEMBERLIST
SET PW = CRYPTPACK.ENCRYPT('1234567', '1234567')
  , NAME = '김태민'
  , TEL = '010-3333-3333'
  , EMAIL = 'ktm@test.com'
WHERE ID = 'superman';
-- 한 줄 구성
UPDATE MEMBERLIST SET PW = CRYPTPACK.ENCRYPT('1234567', '1234567'), NAME = '김태민', TEL = '010-3333-3333', EMAIL = 'ktm@test.com' WHERE ID = 'superman'
;

ROLLBACK;


-- 테스트용 데이터 입력
INSERT INTO MEMBERLIST(ID, PW, NAME, TEL, EMAIL)
VALUES('superboy', CRYPTPACK.ENCRYPT('2345678', '2345678'), '홍길동', '010-3333-3333', 'hgd@test.com');

COMMIT;


-- ▼ MEMBERLIST 삭제 쿼리문 구성
DELETE
FROM MEMBERLIST
WHERE ID = 'superboy';
-- 한 줄 구성
DELETE FROM MEMBERLIST WHERE ID = 'superboy'
;

ROLLBACK;


-- ▼ ID 검색 쿼리문 구성
SELECT ID, NAME, TEL, EMAIL
FROM MEMBERLIST
WHERE ID = 'superman'
ORDER BY ID;
-- 한 줄 구성
SELECT ID, NAME, TEL, EMAIL FROM MEMBERLIST WHERE ID = 'superman' ORDER BY ID
;


--------------------------------------------------------------------------------

DESC MEMBERRECORD;

-- ▽ MEMBERRECORD 조회 쿼리문 구성
SELECT L.NAME AS NAME
     , R.KOR AS KOR
     , R.ENG AS ENG
     , R.MAT AS MAT
     , (R.KOR + R.ENG + R.MAT)/3 AS AVG
     , R.SCOREID AS SCOREID
FROM MEMBERLIST L LEFT JOIN MEMBERRECORD R
  ON L.ID = R.ID
ORDER BY NAME;

-- ▼ MEMBERRECORD_VIEW 생성
CREATE OR REPLACE VIEW MEMBERRECORD_VIEW
AS
SELECT L.ID AS ID
     , L.NAME AS NAME
     , R.KOR AS KOR
     , R.ENG AS ENG
     , R.MAT AS MAT
     , (R.KOR + R.ENG + R.MAT)/3 AS AVG
     , R.SCOREID AS SCOREID
     , L.GRADE AS GRADE
FROM MEMBERLIST L LEFT JOIN MEMBERRECORD R
  ON L.ID = R.ID
ORDER BY NAME;
-- View MEMBERRECORD_VIEW이(가) 생성되었습니다.

-- ▼ VIEW를 이용한 조회 쿼리문 구성
SELECT ID, NAME, KOR, ENG, MAT, AVG, SCOREID
FROM MEMBERRECORD_VIEW
WHERE GRADE = 1
ORDER BY SCOREID;
-- 한 줄 구성
SELECT ID, NAME, KOR, ENG, MAT, AVG, SCOREID, GRADE FROM MEMBERRECORD_VIEW WHERE GRADE = 1 ORDER BY SCOREID
;


-- ▼ MEMBERRECORD 수정 쿼리문 구성
UPDATE MEMBERRECORD
SET KOR = 100
  , ENG = 100
  , MAT = 100
WHERE SCOREID = 1;
-- 한 줄 구성
UPDATE MEMBERRECORD SET KOR = 100, ENG = 100, MAT = 100 WHERE SCOREID = 1
;

ROLLBACK;


-- ▼ MEMBERRECORD 삭제 쿼리문 구성
DELETE
FROM MEMBERRECORD
WHERE SCOREID = 1;
-- 한 줄 구성
DELETE FROM MEMBERRECORD WHERE SCOREID = 1
;

ROLLBACK;


-- ▼ SCOREID 검색 쿼리문 구성
SELECT ID, NAME, KOR, ENG, MAT, AVG, SCOREID
FROM MEMBERRECORD_VIEW
WHERE SCOREID = 1;
-- 한 줄 구성
SELECT NAME, KOR, ENG, MAT, AVG, SCOREID FROM MEMBERRECORD_VIEW WHERE SCOREID = 1
;

--------------------------------------------------------------------------------

-- ▼ 학생 로그인 쿼리문 구성
SELECT NAME
FROM MEMBERLIST
WHERE ID = 'superman'
  AND PW = CRYPTPACK.ENCRYPT('1234567', '1234567');
-- 한 줄 구성
SELECT NAME FROM MEMBERLIST WHERE ID = 'superman' AND PW = CRYPTPACK.ENCRYPT('1234567', '1234567') AND GRADE=1
;
-- 김태민
-- : 로그인 성공
SELECT NAME FROM MEMBERLIST WHERE ID = 'superman' AND PW = CRYPTPACK.ENCRYPT('1', '1') AND GRADE=1
;

-- ▽ 관리자 로그인을 위한 관리자 구분 컬럼 추가
ALTER TABLE MEMBERLIST
ADD GRADE NUMBER(1) DEFAULT 1;

DESC MEMBERLIST;

-- ▽ 관리자 계정 생성
UPDATE MEMBERLIST
SET GRADE = 0
WHERE ID = 'superboy';

SELECT *
FROM MEMBERLIST;

COMMIT;

-- ▼ 관리자 로그인 쿼리문 구성
SELECT NAME
FROM MEMBERLIST
WHERE ID = 'superman'
  AND PW = CRYPTPACK.ENCRYPT('1234567', '1234567')
  AND GRADE = 0;
-- 한 줄 구성
SELECT NAME FROM MEMBERLIST WHERE ID = 'superman' AND PW = CRYPTPACK.ENCRYPT('1234567', '1234567') AND GRADE = 1
;
-- 김태민
-- : 로그인 성공

--------------------------------------------------------------------------------

-- ▽ GRADE 컬럼 추가 후 MEMBERLIST_VIEW 수정
CREATE OR REPLACE VIEW MEMBERLIST_VIEW
AS
SELECT L.ID AS ID
     , L.NAME AS NAME
     , L.TEL AS TEL
     , L.EMAIL AS EMAIL
     , L.GRADE AS GRADE
     , (SELECT COUNT(*)
        FROM MEMBERRECORD
        WHERE ID = L.ID) AS DELCHECK
FROM MEMBERLIST L
ORDER BY L.ID;
-- View MEMBERLIST_VIEW이(가) 생성되었습니다.

-- ▼ MEMBERLIST_VIEW 조회 쿼리문 구성
SELECT ID, NAME, TEL, EMAIL, GRADE, DELCHECK
FROM MEMBERLIST_VIEW
ORDER BY ID;
-- 한 줄 구성
SELECT ID, NAME, TEL, EMAIL, GRADE, DELCHECK FROM MEMBERLIST_VIEW ORDER BY ID
;

-- ▼ 학생(GRADE=1) 조회 쿼리문 구성
SELECT ID, NAME, TEL, EMAIL, GRADE, DELCHECK
FROM MEMBERLIST_VIEW
WHERE GRADE = 1
ORDER BY ID;
-- 한 줄 구성
SELECT ID, NAME, TEL, EMAIL, GRADE, DELCHECK FROM MEMBERLIST_VIEW WHERE GRADE = 1 ORDER BY ID
;

DESC MEMBERLIST;

--------------------------------------------------------------------------------

-- ▼ ID로 MEMBERRECORD의 SCOREID 찾는 쿼리문 작성
SELECT SCOREID
FROM MEMBERRECORD_VIEW
WHERE ID = 'superman';
-- 한 줄 구성
SELECT SCOREID FROM MEMBERRECORD_VIEW WHERE ID = 'superman'
;