<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
						http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
						http://www.springframework.org/schema/context
						http://www.springframework.org/schema/context/spring-context-3.0.xsd">
	<context:component-scan base-package="org.springframework.samples.petclinic.web" />
	
	<!-- DispatcherServlet 이 무슨 일 해야하는지 적어놓은거 -->
	
	<!-- ※ 『dispacher-servlet.xml』 의 기본 샘플 코드 -->
	<!-- 이 코드는 기본 설정에 대한 템플릿을 복사하기 위해 스프링 doc 를 참조하여 작성한다 -->
	<!-- → 1. 『C:\s-f-3.0.2-with-docs\docs\spring-framework-reference\pdf』 경로로 이동 -->
	<!--    2. 『spring-framework-reference.pdf』 파일 실행 -->
	<!--    3. 본문 내용의 425 페이지(찾아서 직접 이동 450/805 페이지) 로 이동 -->
    <!--    4. 페이지 하단의 XML 파일 샘플코드 복붙 -->	
	
	<!-- 『BeanNameUrlHandlerMapping』 -->
	<bean id="beanNameUrlHandlerMapping" class="org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping">
		<property name="alwaysUseFullPath" value="true"></property>
		<property name="order" value="1"></property>
	</bean>
	<!--
		※ 『BeanNameUrlHandlerMapping』
			HTTP 요청 URL과 빈(bean)의 이름을 비교하여
			일치하는 빈(bean)을 찾아주는 역할을 수행한다
			빈 이름에는 『*』, 『**』, 『?』 를 이용한 패턴을 넣을 수 있다
			(ANT 패턴)
			하지만, 컨트롤러의 개수가 많아지면
			URL 정보가 XML 이나 Annotation 에 분산되어 파악이 어렵기 때문에
			복잡한 애플리케이션에서는 사용하지 않는 것이 바람직하다
			
			ex)
			<bean name="/hello*" class="HelloController" />
			→ hello 로 시작하면 모두 여기에 매핑된다.
			
			<bean name="/root/**/sub" class="SubController" />
			→ 『**』는 하나 이상의 경로를 매핑할 수 있다.
			
			- alwaysUseFullPath
			  : URL 매핑은 기본적으로
			    『애플리케이션 컨텍스트 패스』, 『서블릿 패스』 를 제외한
			    나머지만 가지고 비교하게 된다
			    즉, 애플리케이션이 『/test』 에 배포되고,
			    DispatcherServlet URL mapping 이 『/app/*』 일 경우
			    전체 URL은 『/test/app/hello』 와 같은 형태가 되지만,
			    핸들러 매핑은 『/hello』 만을 대상으로 삼는다는 의미이다
			    이는 애플리케이션이나 서블릿이 변경되어도
			    애플리케이션의 매핑 구조는 영향을 받지 않게 하기 위해서이다
			    alwaysUseFullPath 옵션을 true 로 설정하면
			    이를 해제하고 모든 URL을 대상으로 변경할 수 있다
			    
			 - order
			   : 핸들러 매핑은 한 개 이상을 동시에 사용할 수 있다
			     한 개의 매핑으로 사용하는 것이 이상적이지만
			     그렇지 않은 상황이 존재한다
			     두 개 이상의 핸들러 매핑이 등록되었는데
			     URL 이 중복 매핑될 경우,
			     『order』 프로퍼티를 통해 매핑 우선순위를 지정할 수 있다
			     『order』 프로퍼티의 값이 작은 매핑 전략이 높은 우선순위를 갖는다
			     
		HandlerMapping
         -MVC패턴의 핵심은 『컨트롤러』를 통해 진입한다는 것.
         
         -HandlerMapping 하면 servlet / servlet-mapping이 떠올라야함
         
         -컨트롤러로 진입한다는 것은 요청이 들어왔다는것, 그것에 맞는 응답이 있어야한다는것
         
         -단일 요청에 단일 응대라면... 하나의 어플리케이션이 받는 요청이 1000개라면...
           매핑구조를 1000개를 만들어야함 
         
         -1000개의 요청에을 1000개의 매핑을 해줄수는 없기에....
          패턴을 나눠서 분류(유형에 따라 분류) → 핸들러매핑(5가지의 유형)
          [요청의 유형에 따라 분류하는것.]  
           
         - 그중에 우리가 배울 것 BeanNameUrlHandlerMapping
         
         
         ViewResolver : 비서 (컨트롤러 따까리)
         컨트롤러는 얄미운놈.
         (벽돌날라주세요 라는 요청이 들어오면 자신이 하지 않고, 시킴.)
         (벽돌날라주는것 을 시키는것 조차도 대상을 명확히 파악하는것이 아니라,
          ~잘하는 팀 이런식으로 시키는 구조
          : 비서야! 알아보고 잘하는애한테 시켜!)
          
          디폴트 ViewResolver가 있는데 커스터마이징 해서 등록해주게 되면 간편하게 쓸수있음
          //mav.setViewName("/WEB-INF/view/EmployeeList.jsp");
          →
          //   mav.setViewName("EmployeeList.jsp");
	-->
	
	<!-- 『InternalResourceViewResolver』 -->
	<bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<!-- "/WEB-INF/view/EmployeeList.jsp -->
		<!-- "/WEB-INF/view/" + "EmployeeList" + ".jsp" -->
		<property name="prefix" value="/WEB-INF/view/"></property>
		<property name="suffix" value=".jsp"></property>
	</bean>
	
	<!-- 
		※ 『InternalResourceViewResolver』
		   스프링 컨트롤러는 뷰에 의존적이지 않다
		   컨트롤러가 지정한 뷰 이름으로부터
		   응답 결과 화면을 생성하는 뷰 객체는 ViewResolver 가 얻어낸다
		   스프링은 몇 반환한다
		   - VelocityView 가지 ViewResolver 구현 클래스를 제공하고 있는데,
		   이 중 주요 ViewResolver 구현 클래스는 다음과 같다
		   
		   - InternalResourceViewResolver
		     : 뷰 이름으로부터 JSP 나 타일즈(Tiles) 연동을 위한
		       View 객체를Resolver
		     : 뷰 이름으로부터 Velocity 연동을 위한 View 객체를 반환한다
		   - VelocityLayoutViewResolver
		     : VelocityViewResolver의 하위 객체로
		       VelocityViewResolver와 동일한 기능을 제공하며
		       이에 더하여 Velocity 의 레이아웃 기능을 제공한다
		   - BeanNameViewResolver
		     : 뷰 이름과 같은 이름을 갖는 빈 객체를 View 객체로 사용한다
		   - ResourceBundleViewResolver
		     : 뷰 이름과 View 객체 간 매핑 정보를 저장하기 위해
		       Resource 파일을 사용한다
		   - XmlViewResolver
		     : 뷰 이름과 View 객체 간 매핑 정보를 저장하기 위해
		       XML 파일을 사용한다.
		       
		※ ViewResolver Interface
		   - ViewResolver 는 뷰 이름과 지역화를 위한
		     Locale 을 파라미터로 전달받으며,
		     매핑되는 View 객체를 반환한다
		     매핑되는 View 객체가 존재하지 않으면 null 을 반환한다
		     
		※ View 객체
		   - 『getContentType()』 메소드는 『"text/html"』 과 같은
		     응답 결과의 컨텐트 타입을 반환한다
		     『render()』 메소드는 실제로 응답 결과를 생성한다
		     『render()』 메소드는 첫 번째 파라미터인 model 에는
		     컨트롤러가 반환한 ModelAndView 객체의 모델 데이터가 전달된다
		     각각의 View 객체는 이 모델 데이터로붙터 응답 결과를 생성하는데
		     필요한 정보를 얻어낸다
		     
		※ InternalResourceViewResolver 설정
		   - InternalResourceViewResolver 클래스는 JSP 나 HTML 파일과 같이
		     웹 애플리케이션의 내부 Resource 를 이용하여 뷰를 생성하는
		     AbstractUrlBaseView 타입의 뷰 객체를 반환한다
		     기본적으로 사용하는 뷰 클래스는 InternalResourceView 클래스이다
		     
		   - InternalResourceViewResolver 는
		     컨트롤러가 지정한 뷰 이름으로부터 실제로 사용될 뷰를 선택하는데,
		     이 때, 컨트롤러가 지정한 뷰 이름 앞뒤로
		     prefix 프로퍼티와 suffix 프로퍼티를 추가한 값이
		     실제로 사용될 Resource 의 경로가 된다
	-->
	
	<!-- ※ 사용자 정의 Controller 객체 등록 및 요청 URL 매핑 주소 등록 -->
	<!--    - 『name=""』 속성에 매핑 주소를 등록한다. -->
	<!--      이 과정에서 Front Controller 가 갖고 있는 확장자의 형태로 구성한다. -->
	<!--    - 『class=""』 속성은 Controller 객체의 클래스 경로 및 이름을 등록한다. -->
	
	
	
	<!-- DataSource 등록 → SimpleDriverDataSource -->
	<bean id="myDataSource" class="org.springframework.jdbc.datasource.SimpleDriverDataSource">
		<property name="driverClass" value="oracle.jdbc.driver.OracleDriver"></property>
		<property name="url" value="jdbc:oracle:thin:@211.238.142.55:1521:xe"></property>
		<property name="username" value="scott"></property>
		<property name="password" value="tiger"></property>
	</bean>
	
	<!-- DAO 등록 -->
	<bean id="employeeDAO" class="com.test.mvc.EmployeeDAO">
		<!-- employeeDAO 도 property setting이 필요함 (dataSource) -->
		<!-- 참조할 수 있도록 dataSource 등록해야함 -->
		<property name="dataSource" ref="myDataSource"></property>
		<!-- └→ myDataSource, remoteDataSource 등 위에 등록된 DataSource 사용가능 -->
	</bean>
	
	<bean id="regionDAO" class="com.test.mvc.RegionDAO">
		<property name="dataSource" ref="myDataSource"></property>
	</bean>
	
	<bean id="departmentDAO" class="com.test.mvc.DepartmentDAO">
		<property name="dataSource" ref="myDataSource"></property>
	</bean>
	
	<bean id="positionDAO" class="com.test.mvc.PositionDAO">
		<property name="dataSource" ref="myDataSource"></property>
	</bean>
	
	<!-- AJAX 관련 Controller 등록 -->
	<bean name="/ajax.action" class="com.test.mvc.AjaxController">
		<property name="dao" ref="employeeDAO"></property>
	</bean>
	
	<!-- Employee 관련 Controller 동록 -->
	<!-- 직원 리스트 Controller 등록 -->
	<bean name="/employeelist.action" class="com.test.mvc.EmployeeListController">
		<!-- dao property 등록 -->
		<!-- ref: 참고할 수 있는 무언가가 있어야 하니까 위에서 DAO 등록해야함 -->
		<!-- 'dao 객체 생성해서 employeeDAO 주입시켜줘'라는 의미 -->
		<property name="dao" ref="employeeDAO"></property>
	</bean>
	
	<!-- 직원 데이터 입력 폼 Controller 등록 -->
	<bean name="/employeeinsertform.action" class="com.test.mvc.EmployeeInsertFormController">
		<property name="dao" ref="employeeDAO"></property> 
	</bean>	
	
	<!-- 직원 데이터 입력 폼 Controller 등록 -->
	<!-- 직원 데이터 입력 액션 Controller 등록 -->
	<bean name="/employeeinsert.action" class="com.test.mvc.EmployeeInsertController">
   		<property name="dao" ref="employeeDAO"></property>
	</bean>
	
	<!-- 직원 데이터 수정 폼 Controller 등록 -->
	<bean name="/employeeupdateform.action" class="com.test.mvc.EmployeeUpdateFormController">
		<!-- 앞에 name 의 속성값이 의미하는 것은 EmployeeUpdateFormController의 속성 이름을 의미한다. -->
		<!-- 그럼 걔에 해당하는 setter()를 호출하는 것 -->
		<!-- ref의 속성값은 dispatcher-servlet 에 등록해놓은 employeeDAO -->
		<!-- name 속성값은 해당 클래스에 속성값 이름과 setter 있으면 된다. -->
		<!-- → 이름 수정하면 setter 메소드까지 꼭 같이 수정해줘야 함 -->	
		<property name="employeeDAO" ref="employeeDAO"></property>
		<property name="regionDAO" ref="regionDAO"></property>
		<property name="departmentDAO" ref="departmentDAO"></property>
		<property name="positionDAO" ref="positionDAO"></property>
	</bean>
	
	<!-- 직원 데이터 수정 액션 Controller 등록 -->
	<bean name="/employeeupdate.action" class="com.test.mvc.EmployeeUpdateController">
		<property name="dao" ref="employeeDAO"></property>
	</bean>
	
	
</beans>
