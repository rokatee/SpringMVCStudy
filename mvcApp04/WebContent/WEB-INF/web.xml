<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://xmlns.jcp.org/xml/ns/javaee"
	xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"
	version="3.1">
	<display-name>mvcApp04</display-name>
	<welcome-file-list>
		<welcome-file>index.html</welcome-file>
		<welcome-file>index.htm</welcome-file>
		<welcome-file>index.jsp</welcome-file>
		<welcome-file>default.html</welcome-file>
		<welcome-file>default.htm</welcome-file>
		<welcome-file>default.jsp</welcome-file>
	</welcome-file-list>
	
	<!-- ※ Spring MVC Framework 등록 -->
	<!--    → Front Controller 등록 -->
	<!-- 		→ DispacherServler 객체 등록 -->
	
	<!-- ※ 추후 별도로 필터를 사용하거나 하기 전까지는 -->
	<!--    이 코드를 그대로 사용할 예정 -->
	<!--    → Front Controller 를 바꾸어 등록할 일이 없기 때문에 -->
	<!-- 
	<servlet>
		<servlet-name>dispatcher</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
	</servlet>
	
	<servlet-mapping>
		<servlet-name>dispatcher</servlet-name>
		<url-pattern>*.action</url-pattern>
	</servlet-mapping>
	-->
	
	
	<!-- ※ 스프링 환경 설정 -->
	<!--    - ContextLoaderListener
	          : 서로 다른 DispatcherServlet 이 공통으로 사용될 빈 설정 -->
	<!--    - 『<context-param>』 태그로 설정 파일을 지정하지 않으면 -->
	<!--      『applicationContext.xml』 이 설정 파일이 된다. -->
	<!-- 
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>
			/WEB-INF/service.xml,
			/WEB-INF/common.xml
		</param-value>
	</context-param>
	-->
	
	
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>
	
	<!-- 스프링 프론트 컨트롤러 -->
	<servlet>
		<servlet-name>dispatcher</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<!-- 
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>
				/WEB-INF/dispatcher-service.xml,
				/WEB-INF/front.xml
			</param-value>			
		</init-param>
		-->
		<load-on-startup>1</load-on-startup>
	</servlet>

	<!-- ※ 『<load-on-startup>』
	         - 『web.xml』에서 servlet 을 설정할 때 사용되며,
	 			설정되는 값은 숫자이다.
	 		 -  서블릿은 최초 요청이 들어올 때 초기화된다
	 		    클래스 로딩 및 인스턴스 초기화 설정을 해야 하는 것이다         
				이렇게 되면 서버가 올라가고 맨 처음 호출한 유저는
				일반저긍로 처리되는 시간보다 오래 걸리게 된다
				이와 같은 상황을 방지하기 위해
				『<load-on-startup>』 엘리먼트를 사용한다
			 -  여기에 설정되는 숫자는
			    0 보다 크면 서버가 구동되면서 서블릿을 초기화한다
			    또한, 이 숫자는 서블릿 인스턴스 생성 개수가 아니라
			    우선순위이다
			    즉, 0 보다 큰 값 중에서 가장 낮은 수가 가장 먼저 초기화되는 것이다
			    같은 값이 존재할 경우 먼저 작성된 서블릿부터 초기화한다 	          
	          
	 -->
	
	<servlet-mapping>
		<servlet-name>dispatcher</servlet-name>
		<url-pattern>*.action</url-pattern>
	</servlet-mapping>
	
	<!-- check~!!! -->
	<!-- 필터 등록 → 인코딩 필터 등록 → CharacterEncodingFilter -->
	<!-- 필터 : 요청/응답 여과시켜서 얻고자하는 형태로 나오게 하는 것 -->
	<!-- CharacterEncodingFilter 사용해서 뭘로 요청하든 UTF-8로 바꾸는 필터 사용해보자 -->
	<filter>
		<filter-name>encodingFilter</filter-name>
		<!-- <filter-class>내가설계한클래스</filter-class> -->
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
		<!-- └→ 아무 class가서 CharacterEncodingFilter 써서 import 구문 가져와서 filter-class에 적어주면 된다. -->
		
		<!-- 필터 설정 → 필터에 파라미터 초기값 지정 -->
		<init-param>
			<param-name>encoding</param-name>
			<param-value>UTF-8</param-value>
		</init-param>
	</filter>
	
	<!-- 어떤 요청일 때 이 필터가 기능하게 할 껀지도 명시해야 한다. -->
	<!-- servlet에서 servlet-mapping 있듯이,  filter도 filter-mapping이 있다. -->
	
	<filter-mapping>
		<filter-name>encodingFilter</filter-name>
		<url-pattern>/*</url-pattern>
		<!-- └→ contextpath(cp) 에 있는 모든 요청일 때, 기능하게 할 것이라는 의미 -->
		<!-- 이러면 이제 이미 여기서 utf-8 필터 거쳤기 때문에 -->
		<!-- request.setCharacterEncoding=utf-8 안해도 된다. --> 
	</filter-mapping>
	
</web-app>